use_git()
library(devtools)
use_git()
x <- "alfa,bravo,charlie,delta"
library(devtools)
strsplit(x, split = ",")
str(strsplit(x, split = ","))
unlist(strsplit(x, split = ","))
strsplit(x, split = ",")[[1]]
use_r("strsplit1")
load_all()
strsplit1(x, split = ",")
exists("strsplit1", where = globalenv(), inherits = FALSE)
check()
use_mit_license()
document()
?strsplit1
check()
install()
library(regexcite)
x <- "alfa,bravo,charlie,delta"
strsplit1(x, split = ",")
use_testthat()
library(devtools)
use_testthat()
use_test()
library(testthat)
load_all()
test_that("strsplit1() splits a string", {
expect_equal(strsplit1("a,b,c", split = ","), c("a", "b", "c"))
})
test()
use_package("stringr")
rename_files("strsplit1", "str_split_one")
test_that("str_split_one() splits a string", {
expect_equal(str_split_one("a,b,c", ","), c("a", "b", "c"))
})
load_all()
test_that("str_split_one() splits a string", {
expect_equal(str_split_one("a,b,c", ","), c("a", "b", "c"))
})
test_that("str_split_one() errors if input length > 1", {
expect_error(str_split_one(c("a,b","c,d"), ","))
})
test_that("str_split_one() exposes features of stringr::str_split()", {
expect_equal(str_split_one("a,b,c", ",", n = 2), c("a", "b,c"))
expect_equal(str_split_one("a.b", stringr::fixed(".")), c("a", "b"))
})
document()
load_all()
str_split_one("a, b, c", pattern = ", ")
